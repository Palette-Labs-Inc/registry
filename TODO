## TODO

### Technical 
- [ ] `getNodeUID` to be exported from the registry contract package and imported into `registry-sdk` instead of duplicated in the /util folder. OR create a shared utils package.
- [ ] Identify a method for `NodeEntry` owners to be able to self-attest to update their status by submitting a cryptographic proof of their adoption of the protocol specification for their industry.
- [ ] Add methods to `registry-sdk` to verify Authorization signature headers.
- [ ] Add unit tests for `getNode` method to `registry-sdk`

- [ ] Test that the `hardhat.config.ts` works with the dependency compiler update.

```ts
  dependencyCompiler: {
    paths: [
      '@palette-labs/registry-contracts/contracts/NodeRegistry.sol'
    ]
  },
```


### Organizational
- [ ] write a README that describes the structure of the repository.
- [ ] improve structure of `registry-sdk/test` to not have it's own package.json. It feels similar to the tests in the `registry-contracts` folder. See what can be re-useable.
- [ ] Remove EAS README from `registry-sdk` package.
- [ ] Update the **overview of registration process** below to mirror updates and add to root README.

### Future TODO
- [ ] determine how to deploy internal packages to npm from  monorepo structure.




### Overview of registration process

###  Option 1
1. **Modify the Smart Contract to Include Public Keys**:
    
    - Add a `bytes publicKey` field to your `NodeEntry` struct.
    - Adjust the `registerNode` function to accept a public key as an argument and store it in the registry.
    - The contract must verify that the public key belongs to the address of the signer.

1. **Registration Process**:
    
    - Registrants sign a message (e.g., their Ethereum address or a nonce provided during the registration process) off-chain using their private key.
    - The signed message and the public key are sent to the registry contract during the registration process.
    - The smart contract stores the public key and associates it with the registrant's node entry.
3. **Verification Process (Off-Chain using SDK or Backend)**:
    - Provide a method in the SDK or backend service that takes a signature, the original message, and the registrant's `uid`. We can also generate the ID from the context header using the getNodeUID method.
    - Use ethers.js to recover the address from the signature and the original message.
    - Fetch the registrant's public key from the smart contract using the provided `uid`.
    - Compare the recovered address against the address derived from the public key stored on-chain to ensure they match.
    - If they match, the signature is valid, and the registrant is verified as being listed in the registry.




### Need a way to move an "INITIATED" Node to a "VERIFIED" Node. In Beckn this is the /on_subscribe handshake.
[Beckn Registry Api.](https://github.com/beckn/registry/blob/main/local-registry/api.yaml) 
- description: 'Validates a subscriber. In this API the Registry generates a random string, encrypts it with the subscriber\''s encryption public key and sends it to the subscriber\''s callback URL. The subscriber then decrypts the string using it''s encryption private key and sends back the decypted value to the registry. If the decrypted value is the same as the sent value, the subscriber get''s added to the registry with a ```status = "SUBSCRIBED"```'
