/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { NodeRegistry, NodeRegistryInterface } from "../NodeRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "MissingLocation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "uid",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "registerer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "callbackUrl",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "location",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "industryCode",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "enum NodeType",
            name: "nodeType",
            type: "uint8",
          },
          {
            internalType: "enum NodeStatus",
            name: "status",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct NodeEntry",
        name: "node",
        type: "tuple",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "uid",
        type: "bytes32",
      },
    ],
    name: "getNode",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "callbackUrl",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "location",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "industryCode",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "enum NodeType",
            name: "nodeType",
            type: "uint8",
          },
          {
            internalType: "enum NodeStatus",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct NodeEntry",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "callbackUrl",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "location",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "industryCode",
            type: "string",
          },
          {
            internalType: "enum NodeType",
            name: "nodeType",
            type: "uint8",
          },
        ],
        internalType: "struct RegisterNodeEntryParams",
        name: "entry",
        type: "tuple",
      },
    ],
    name: "registerNode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b506000608081905260a052600160c05260805160a05160c05161131d61004f600039600061045c015260006104330152600061040a015261131d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806350c946fe1461004657806354fd4d501461006f5780635888053014610084575b600080fd5b610059610054366004610b80565b6100a5565b6040516100669190610ce7565b60405180910390f35b610077610403565b6040516100669190610de0565b610097610092366004610dfa565b6104a6565b604051908152602001610066565b6100ad610a4d565b60008281526020818152604091829020825161010081019093528054835260018101805491928401916100df90610e35565b80601f016020809104026020016040519081016040528092919081815260200182805461010b90610e35565b80156101585780601f1061012d57610100808354040283529160200191610158565b820191906000526020600020905b81548152906001019060200180831161013b57829003601f168201915b5050505050815260200160028201805461017190610e35565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610e35565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156102c457838290600052602060002001805461023790610e35565b80601f016020809104026020016040519081016040528092919081815260200182805461026390610e35565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b505050505081526020019060010190610218565b5050505081526020016004820180546102dc90610e35565b80601f016020809104026020016040519081016040528092919081815260200182805461030890610e35565b80156103555780601f1061032a57610100808354040283529160200191610355565b820191906000526020600020905b81548152906001019060200180831161033857829003601f168201915b5050509183525050600582015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff1660028111156103b0576103b0610c7d565b60028111156103c1576103c1610c7d565b81526020016005820160159054906101000a900460ff1660028111156103e9576103e9610c7d565b60028111156103fa576103fa610c7d565b90525092915050565b606061042e7f000000000000000000000000000000000000000000000000000000000000000061086c565b6104577f000000000000000000000000000000000000000000000000000000000000000061086c565b6104807f000000000000000000000000000000000000000000000000000000000000000061086c565b60405160200161049293929190610e88565b604051602081830303815290604052905090565b6000806104b960a0840160808501610efe565b60028111156104ca576104ca610c7d565b1480156104e357506104df6040830183610f1f565b1590505b1561051a576040517fcb83582500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805161010081019091526000808252906020810161053a8580610f8e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060209081019061058390860186610f8e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016105ca6040860186610f1f565b6105d391611071565b81526020016105e56060860186610f8e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525033602082015260400161063560a0860160808701610efe565b600281111561064657610646610c7d565b8152602001600090529050600061065c8261092a565b600081815260208190526040902054909150156106a5576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808252600081815260208181526040909120835181559083015183919060018201906106d190826111b3565b50604082015160028201906106e690826111b3565b5060608201518051610702916003840191602090910190610abb565b506080820151600482019061071790826111b3565b5060a082015160058201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff0000000000000000000000000000000000000000001617740100000000000000000000000000000000000000008360028111156107b3576107b3610c7d565b021790555060e08201516005820180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000083600281111561080e5761080e610c7d565b02179055509050503373ffffffffffffffffffffffffffffffffffffffff16817fd4aca4239945b9a5e80d97ac0f8dc1a5e4c8b1b6c0e0b7ae60bf27cb349ee8198460405161085d9190610ce7565b60405180910390a39392505050565b606060006108798361096a565b600101905060008167ffffffffffffffff81111561089957610899610ff3565b6040519080825280601f01601f1916602001820160405280156108c3576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846108cd57509392505050565b600081602001518260400151836080015160405160200161094d939291906112cd565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106109b3577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106109df576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106109fd57662386f26fc10000830492506010015b6305f5e1008310610a15576305f5e100830492506008015b6127108310610a2957612710830492506004015b60648310610a3b576064830492506002015b600a8310610a47576001015b92915050565b6040518061010001604052806000801916815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115610aaf57610aaf610c7d565b81526020016000905290565b828054828255906000526020600020908101928215610b01579160200282015b82811115610b015782518290610af190826111b3565b5091602001919060010190610adb565b50610b0d929150610b11565b5090565b80821115610b0d576000610b258282610b2e565b50600101610b11565b508054610b3a90610e35565b6000825580601f10610b4a575050565b601f016020900490600052602060002090810190610b689190610b6b565b50565b5b80821115610b0d5760008155600101610b6c565b600060208284031215610b9257600080fd5b5035919050565b60005b83811015610bb4578181015183820152602001610b9c565b50506000910152565b60008151808452610bd5816020860160208601610b99565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610c70577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018952610c5e838351610bbd565b98840198925090830190600101610c24565b5090979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610ce3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081528151602082015260006020830151610100806040850152610d10610120850183610bbd565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080868503016060870152610d4c8483610bbd565b93506060870151915080868503016080870152610d698483610c07565b935060808701519150808685030160a087015250610d878382610bbd565b92505060a0850151610db160c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c0850151610dc460e0860182610cac565b5060e0850151610dd682860182610cac565b5090949350505050565b602081526000610df36020830184610bbd565b9392505050565b600060208284031215610e0c57600080fd5b813567ffffffffffffffff811115610e2357600080fd5b820160a08185031215610df357600080fd5b600181811c90821680610e4957607f821691505b602082108103610e82577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008451610e9a818460208901610b99565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610ed6816001850160208a01610b99565b60019201918201528351610ef1816002840160208801610b99565b0160020195945050505050565b600060208284031215610f1057600080fd5b813560038110610df357600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610f5457600080fd5b83018035915067ffffffffffffffff821115610f6f57600080fd5b6020019150600581901b3603821315610f8757600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610fc357600080fd5b83018035915067ffffffffffffffff821115610fde57600080fd5b602001915036819003821315610f8757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561106957611069610ff3565b604052919050565b600067ffffffffffffffff8084111561108c5761108c610ff3565b8360051b602061109d818301611022565b8681529185019181810190368411156110b557600080fd5b865b84811015611158578035868111156110cf5760008081fd5b8801601f36818301126110e25760008081fd5b8135888111156110f4576110f4610ff3565b611123877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08484011601611022565b9150808252368782850101111561113a5760008081fd5b808784018884013760009082018701528452509183019183016110b7565b50979650505050505050565b601f8211156111ae57600081815260208120601f850160051c8101602086101561118b5750805b601f850160051c820191505b818110156111aa57828155600101611197565b5050505b505050565b815167ffffffffffffffff8111156111cd576111cd610ff3565b6111e1816111db8454610e35565b84611164565b602080601f83116001811461123457600084156111fe5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556111aa565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561128157888601518255948401946001909101908401611262565b50858210156112bd57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600084516112df818460208901610b99565b8451908301906112f3818360208901610b99565b8451910190611306818360208801610b99565b019594505050505056fea164736f6c6343000813000a";

type NodeRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NodeRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NodeRegistry__factory extends ContractFactory {
  constructor(...args: NodeRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      NodeRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): NodeRegistry__factory {
    return super.connect(runner) as NodeRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NodeRegistryInterface {
    return new Interface(_abi) as NodeRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): NodeRegistry {
    return new Contract(address, _abi, runner) as unknown as NodeRegistry;
  }
}
