{
  "address": "0x1AB85870ae7732418ba084C1862704BD523d0505",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "registerer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callbackUrl",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "location",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "industryCode",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum NodeType",
              "name": "nodeType",
              "type": "uint8"
            },
            {
              "internalType": "enum NodeStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct NodeEntry",
          "name": "node",
          "type": "tuple"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "getNode",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callbackUrl",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "location",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "industryCode",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum NodeType",
              "name": "nodeType",
              "type": "uint8"
            },
            {
              "internalType": "enum NodeStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct NodeEntry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callbackUrl",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "location",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "industryCode",
              "type": "string"
            },
            {
              "internalType": "enum NodeType",
              "name": "nodeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct RegisterNodeEntryParams",
          "name": "entry",
          "type": "tuple"
        }
      ],
      "name": "registerNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x51fe522e1003ce51c3df39b560231297992ddea0246aa70f3f3de717a511ce0c",
  "receipt": {
    "to": null,
    "from": "0xd443dDeeC8cD386B6d592b82853738490798922a",
    "contractAddress": "0x1AB85870ae7732418ba084C1862704BD523d0505",
    "transactionIndex": 3,
    "gasUsed": "1081514",
    "logsBloom": "0x
    "blockHash": "0xb974cfec7d5e4d089b9c4543c50fc67d98db032ea1899488a72a7b842962b423",
    "transactionHash": "0x51fe522e1003ce51c3df39b560231297992ddea0246aa70f3f3de717a511ce0c",
    "logs": [],
    "blockNumber": 5788054,
    "cumulativeGasUsed": "1175027",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5481d53177a92722ed5efd6ea76cab28",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callbackUrl\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"location\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"industryCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum NodeType\",\"name\":\"nodeType\",\"type\":\"uint8\"},{\"internalType\":\"enum NodeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct NodeEntry\",\"name\":\"node\",\"type\":\"tuple\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callbackUrl\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"location\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"industryCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum NodeType\",\"name\":\"nodeType\",\"type\":\"uint8\"},{\"internalType\":\"enum NodeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct NodeEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callbackUrl\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"location\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"industryCode\",\"type\":\"string\"},{\"internalType\":\"enum NodeType\",\"name\":\"nodeType\",\"type\":\"uint8\"}],\"internalType\":\"struct RegisterNodeEntryParams\",\"name\":\"entry\",\"type\":\"tuple\"}],\"name\":\"registerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,string,string,string[],string,address,uint8,uint8))\":{\"params\":{\"node\":\"The node entry data.\",\"registerer\":\"The address of the account used to register the schema.\",\"uid\":\"The schema UID.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a new NodeRegistry instance.\"},\"getNode(bytes32)\":{\"params\":{\"uid\":\"The UID of the node to retrieve.\"},\"returns\":{\"_0\":\"The NodeEntry data.\"}},\"registerNode((string,string,string[],string,uint8))\":{\"params\":{\"entry\":\"The NodeEntry data.\"},\"returns\":{\"_0\":\"The UID of the registered node.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"NodeRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,string,string,string[],string,address,uint8,uint8))\":{\"notice\":\"Emitted when a new node has been registered\"}},\"kind\":\"user\",\"methods\":{\"getNode(bytes32)\":{\"notice\":\"Retrieves a node entry by its UID\"},\"registerNode((string,string,string[],string,uint8))\":{\"notice\":\"Registers a new node entry\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"The global node registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NodeRegistry.sol\":\"NodeRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing an ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x31ea2560e28a597f515d73d35ab81148662ed1f9b797d64cfe66f736d8443e8d\",\"license\":\"MIT\"},\"contracts/INodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Define an enum for a Provider Supporting Node and Buyer Supporting Node\\nenum NodeType {\\n    PSN, // provider supporting node\\n    BSN, // buyer supporting node\\n    GP // gateway provider\\n}\\n\\n// Define an enum for the status\\nenum NodeStatus {\\n    INITIATED,\\n    VERIFIED,\\n    INVALID\\n}\\n\\nstruct NodeEntry {\\n    bytes32 uid; // Unique identifier\\n    string name; // Name of the node\\n    string callbackUrl; // Callback URL of the server for the node\\n    string[] location; // Array of h3 strings for the supported location\\n    string industryCode; // Industry code\\n    address owner; // the wallet holder of the registrant.\\n    NodeType nodeType; // Type of the node (PSN or BSN)\\n    NodeStatus status; // Status of the node (VERIFIED or UNVERIFIED)\\n}\\n\\nstruct RegisterNodeEntryParams {\\n    string name; // Name of the node\\n    string callbackUrl; // Callback URL of the server for the node\\n    string[] location; // Array of h3 strings for the supported location\\n    string industryCode; // Industry code\\n    NodeType nodeType; // Type of the node (PSN or BSN)\\n}\\n\\n/// @title INodeEntry\\n/// @notice Interface for Node Entry management in a Solidity smart contract.\\ninterface INodeRegistry {\\n    /// @notice Emitted when a new node has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param node The node entry data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, NodeEntry node);\\n\\n    /// @notice Registers a new node entry\\n    /// @param entry The NodeEntry data.\\n    /// @return The UID of the registered node.\\n    function registerNode(RegisterNodeEntryParams calldata entry) external returns (bytes32);\\n\\n    /// @notice Retrieves a node entry by its UID\\n    /// @param uid The UID of the node to retrieve.\\n    /// @return The NodeEntry data.\\n    function getNode(bytes32 uid) external view returns (NodeEntry memory);\\n}\\n\",\"keccak256\":\"0x9bb0ddf0453cfd4b48037d41d8354b96f9b310bdac7df79176db3b092800df35\",\"license\":\"MIT\"},\"contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"contracts/NodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { INodeRegistry, NodeEntry, RegisterNodeEntryParams, NodeStatus } from \\\"./INodeRegistry.sol\\\";\\nimport { EMPTY_UID } from \\\"./Common.sol\\\";\\nimport { Semver } from \\\"./Semver.sol\\\";\\n\\n/// @title NodeRegistry\\n/// @notice The global node registry.\\ncontract NodeRegistry is INodeRegistry, Semver {\\n    error AlreadyExists();\\n\\n    // The global mapping between node records and their IDs.\\n    mapping(bytes32 uid => NodeEntry nodeEntry) private _registry;\\n\\n    /// @dev Creates a new NodeRegistry instance.\\n    constructor() Semver(0, 0, 1) {}\\n\\n    /// @inheritdoc INodeRegistry\\n    function registerNode(RegisterNodeEntryParams calldata entry) external returns (bytes32) {\\n        NodeEntry memory nodeEntry = NodeEntry({\\n            uid: EMPTY_UID,\\n            status: NodeStatus.INITIATED,\\n            owner: msg.sender,\\n            name: entry.name,\\n            callbackUrl: entry.callbackUrl,\\n            location: entry.location,\\n            industryCode: entry.industryCode,\\n            nodeType: entry.nodeType\\n        });\\n\\n        bytes32 uid = _getUID(nodeEntry);\\n        if (_registry[uid].uid != EMPTY_UID) {\\n            revert AlreadyExists();\\n        }\\n\\n        nodeEntry.uid = uid;\\n        _registry[uid] = nodeEntry;\\n\\n        emit Registered(uid, msg.sender, nodeEntry);\\n\\n        return uid;\\n    }\\n\\n    /// @inheritdoc INodeRegistry\\n    function getNode(bytes32 uid) external view returns (NodeEntry memory) {\\n        return _registry[uid];\\n    }\\n\\n    /// @dev Calculates a UID for a given node entry.\\n    /// @param nodeEntry The input data.\\n    /// @return node UID.\\n    function _getUID(NodeEntry memory nodeEntry) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(nodeEntry.name, nodeEntry.callbackUrl, nodeEntry.industryCode));\\n    }\\n}\",\"keccak256\":\"0x2687c01a4a8be9f0d187bda8cd1bff18a55c090eeffa78499d992c7e6e39a141\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver is ISemver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _patch;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _patch = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_patch))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506000608081905260a052600160c05260805160a05160c0516112ab61004f600039600061045c015260006104330152600061040a01526112ab6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806350c946fe1461004657806354fd4d501461006f5780635888053014610084575b600080fd5b610059610054366004610b0e565b6100a5565b6040516100669190610c75565b60405180910390f35b610077610403565b6040516100669190610d6e565b610097610092366004610d88565b6104a6565b604051908152602001610066565b6100ad6109db565b60008281526020818152604091829020825161010081019093528054835260018101805491928401916100df90610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461010b90610dc3565b80156101585780601f1061012d57610100808354040283529160200191610158565b820191906000526020600020905b81548152906001019060200180831161013b57829003601f168201915b5050505050815260200160028201805461017190610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610dc3565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156102c457838290600052602060002001805461023790610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461026390610dc3565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b505050505081526020019060010190610218565b5050505081526020016004820180546102dc90610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461030890610dc3565b80156103555780601f1061032a57610100808354040283529160200191610355565b820191906000526020600020905b81548152906001019060200180831161033857829003601f168201915b5050509183525050600582015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff1660028111156103b0576103b0610c0b565b60028111156103c1576103c1610c0b565b81526020016005820160159054906101000a900460ff1660028111156103e9576103e9610c0b565b60028111156103fa576103fa610c0b565b90525092915050565b606061042e7f00000000000000000000000000000000000000000000000000000000000000006107fa565b6104577f00000000000000000000000000000000000000000000000000000000000000006107fa565b6104807f00000000000000000000000000000000000000000000000000000000000000006107fa565b60405160200161049293929190610e16565b604051602081830303815290604052905090565b6040805161010081019091526000808252908190602081016104c88580610e8c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060209081019061051190860186610e8c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016105586040860186610ef8565b61056191610fde565b81526020016105736060860186610e8c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252503360208201526040016105c360a08601608087016110d1565b60028111156105d4576105d4610c0b565b815260200160009052905060006105ea826108b8565b60008181526020819052604090205490915015610633576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082526000818152602081815260409091208351815590830151839190600182019061065f9082611141565b50604082015160028201906106749082611141565b5060608201518051610690916003840191602090910190610a49565b50608082015160048201906106a59082611141565b5060a082015160058201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff00000000000000000000000000000000000000000016177401000000000000000000000000000000000000000083600281111561074157610741610c0b565b021790555060e08201516005820180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000083600281111561079c5761079c610c0b565b02179055509050503373ffffffffffffffffffffffffffffffffffffffff16817fd4aca4239945b9a5e80d97ac0f8dc1a5e4c8b1b6c0e0b7ae60bf27cb349ee819846040516107eb9190610c75565b60405180910390a39392505050565b60606000610807836108f8565b600101905060008167ffffffffffffffff81111561082757610827610f60565b6040519080825280601f01601f191660200182016040528015610851576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461085b57509392505050565b60008160200151826040015183608001516040516020016108db9392919061125b565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610941577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061096d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061098b57662386f26fc10000830492506010015b6305f5e10083106109a3576305f5e100830492506008015b61271083106109b757612710830492506004015b606483106109c9576064830492506002015b600a83106109d5576001015b92915050565b6040518061010001604052806000801916815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115610a3d57610a3d610c0b565b81526020016000905290565b828054828255906000526020600020908101928215610a8f579160200282015b82811115610a8f5782518290610a7f9082611141565b5091602001919060010190610a69565b50610a9b929150610a9f565b5090565b80821115610a9b576000610ab38282610abc565b50600101610a9f565b508054610ac890610dc3565b6000825580601f10610ad8575050565b601f016020900490600052602060002090810190610af69190610af9565b50565b5b80821115610a9b5760008155600101610afa565b600060208284031215610b2057600080fd5b5035919050565b60005b83811015610b42578181015183820152602001610b2a565b50506000910152565b60008151808452610b63816020860160208601610b27565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610bfe577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018952610bec838351610b4b565b98840198925090830190600101610bb2565b5090979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610c71577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081528151602082015260006020830151610100806040850152610c9e610120850183610b4b565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080868503016060870152610cda8483610b4b565b93506060870151915080868503016080870152610cf78483610b95565b935060808701519150808685030160a087015250610d158382610b4b565b92505060a0850151610d3f60c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c0850151610d5260e0860182610c3a565b5060e0850151610d6482860182610c3a565b5090949350505050565b602081526000610d816020830184610b4b565b9392505050565b600060208284031215610d9a57600080fd5b813567ffffffffffffffff811115610db157600080fd5b820160a08185031215610d8157600080fd5b600181811c90821680610dd757607f821691505b602082108103610e10577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008451610e28818460208901610b27565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610e64816001850160208a01610b27565b60019201918201528351610e7f816002840160208801610b27565b0160020195945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610ec157600080fd5b83018035915067ffffffffffffffff821115610edc57600080fd5b602001915036819003821315610ef157600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610f2d57600080fd5b83018035915067ffffffffffffffff821115610f4857600080fd5b6020019150600581901b3603821315610ef157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610fd657610fd6610f60565b604052919050565b600067ffffffffffffffff80841115610ff957610ff9610f60565b8360051b602061100a818301610f8f565b86815291850191818101903684111561102257600080fd5b865b848110156110c55780358681111561103c5760008081fd5b8801601f368183011261104f5760008081fd5b81358881111561106157611061610f60565b611090877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08484011601610f8f565b915080825236878285010111156110a75760008081fd5b80878401888401376000908201870152845250918301918301611024565b50979650505050505050565b6000602082840312156110e357600080fd5b813560038110610d8157600080fd5b601f82111561113c57600081815260208120601f850160051c810160208610156111195750805b601f850160051c820191505b8181101561113857828155600101611125565b5050505b505050565b815167ffffffffffffffff81111561115b5761115b610f60565b61116f816111698454610dc3565b846110f2565b602080601f8311600181146111c2576000841561118c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611138565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561120f578886015182559484019460019091019084016111f0565b508582101561124b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000845161126d818460208901610b27565b845190830190611281818360208901610b27565b8451910190611294818360208801610b27565b019594505050505056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806350c946fe1461004657806354fd4d501461006f5780635888053014610084575b600080fd5b610059610054366004610b0e565b6100a5565b6040516100669190610c75565b60405180910390f35b610077610403565b6040516100669190610d6e565b610097610092366004610d88565b6104a6565b604051908152602001610066565b6100ad6109db565b60008281526020818152604091829020825161010081019093528054835260018101805491928401916100df90610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461010b90610dc3565b80156101585780601f1061012d57610100808354040283529160200191610158565b820191906000526020600020905b81548152906001019060200180831161013b57829003601f168201915b5050505050815260200160028201805461017190610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610dc3565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156102c457838290600052602060002001805461023790610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461026390610dc3565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b505050505081526020019060010190610218565b5050505081526020016004820180546102dc90610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461030890610dc3565b80156103555780601f1061032a57610100808354040283529160200191610355565b820191906000526020600020905b81548152906001019060200180831161033857829003601f168201915b5050509183525050600582015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff1660028111156103b0576103b0610c0b565b60028111156103c1576103c1610c0b565b81526020016005820160159054906101000a900460ff1660028111156103e9576103e9610c0b565b60028111156103fa576103fa610c0b565b90525092915050565b606061042e7f00000000000000000000000000000000000000000000000000000000000000006107fa565b6104577f00000000000000000000000000000000000000000000000000000000000000006107fa565b6104807f00000000000000000000000000000000000000000000000000000000000000006107fa565b60405160200161049293929190610e16565b604051602081830303815290604052905090565b6040805161010081019091526000808252908190602081016104c88580610e8c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060209081019061051190860186610e8c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016105586040860186610ef8565b61056191610fde565b81526020016105736060860186610e8c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252503360208201526040016105c360a08601608087016110d1565b60028111156105d4576105d4610c0b565b815260200160009052905060006105ea826108b8565b60008181526020819052604090205490915015610633576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082526000818152602081815260409091208351815590830151839190600182019061065f9082611141565b50604082015160028201906106749082611141565b5060608201518051610690916003840191602090910190610a49565b50608082015160048201906106a59082611141565b5060a082015160058201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff00000000000000000000000000000000000000000016177401000000000000000000000000000000000000000083600281111561074157610741610c0b565b021790555060e08201516005820180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000083600281111561079c5761079c610c0b565b02179055509050503373ffffffffffffffffffffffffffffffffffffffff16817fd4aca4239945b9a5e80d97ac0f8dc1a5e4c8b1b6c0e0b7ae60bf27cb349ee819846040516107eb9190610c75565b60405180910390a39392505050565b60606000610807836108f8565b600101905060008167ffffffffffffffff81111561082757610827610f60565b6040519080825280601f01601f191660200182016040528015610851576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461085b57509392505050565b60008160200151826040015183608001516040516020016108db9392919061125b565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610941577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061096d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061098b57662386f26fc10000830492506010015b6305f5e10083106109a3576305f5e100830492506008015b61271083106109b757612710830492506004015b606483106109c9576064830492506002015b600a83106109d5576001015b92915050565b6040518061010001604052806000801916815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115610a3d57610a3d610c0b565b81526020016000905290565b828054828255906000526020600020908101928215610a8f579160200282015b82811115610a8f5782518290610a7f9082611141565b5091602001919060010190610a69565b50610a9b929150610a9f565b5090565b80821115610a9b576000610ab38282610abc565b50600101610a9f565b508054610ac890610dc3565b6000825580601f10610ad8575050565b601f016020900490600052602060002090810190610af69190610af9565b50565b5b80821115610a9b5760008155600101610afa565b600060208284031215610b2057600080fd5b5035919050565b60005b83811015610b42578181015183820152602001610b2a565b50506000910152565b60008151808452610b63816020860160208601610b27565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610bfe577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018952610bec838351610b4b565b98840198925090830190600101610bb2565b5090979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610c71577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081528151602082015260006020830151610100806040850152610c9e610120850183610b4b565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080868503016060870152610cda8483610b4b565b93506060870151915080868503016080870152610cf78483610b95565b935060808701519150808685030160a087015250610d158382610b4b565b92505060a0850151610d3f60c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c0850151610d5260e0860182610c3a565b5060e0850151610d6482860182610c3a565b5090949350505050565b602081526000610d816020830184610b4b565b9392505050565b600060208284031215610d9a57600080fd5b813567ffffffffffffffff811115610db157600080fd5b820160a08185031215610d8157600080fd5b600181811c90821680610dd757607f821691505b602082108103610e10577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008451610e28818460208901610b27565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610e64816001850160208a01610b27565b60019201918201528351610e7f816002840160208801610b27565b0160020195945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610ec157600080fd5b83018035915067ffffffffffffffff821115610edc57600080fd5b602001915036819003821315610ef157600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610f2d57600080fd5b83018035915067ffffffffffffffff821115610f4857600080fd5b6020019150600581901b3603821315610ef157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610fd657610fd6610f60565b604052919050565b600067ffffffffffffffff80841115610ff957610ff9610f60565b8360051b602061100a818301610f8f565b86815291850191818101903684111561102257600080fd5b865b848110156110c55780358681111561103c5760008081fd5b8801601f368183011261104f5760008081fd5b81358881111561106157611061610f60565b611090877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08484011601610f8f565b915080825236878285010111156110a75760008081fd5b80878401888401376000908201870152845250918301918301611024565b50979650505050505050565b6000602082840312156110e357600080fd5b813560038110610d8157600080fd5b601f82111561113c57600081815260208120601f850160051c810160208610156111195750805b601f850160051c820191505b8181101561113857828155600101611125565b5050505b505050565b815167ffffffffffffffff81111561115b5761115b610f60565b61116f816111698454610dc3565b846110f2565b602080601f8311600181146111c2576000841561118c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611138565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561120f578886015182559484019460019091019084016111f0565b508582101561124b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000845161126d818460208901610b27565b845190830190611281818360208901610b27565b8451910190611294818360208801610b27565b019594505050505056fea164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "Registered(bytes32,address,(bytes32,string,string,string[],string,address,uint8,uint8))": {
        "params": {
          "node": "The node entry data.",
          "registerer": "The address of the account used to register the schema.",
          "uid": "The schema UID."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates a new NodeRegistry instance."
      },
      "getNode(bytes32)": {
        "params": {
          "uid": "The UID of the node to retrieve."
        },
        "returns": {
          "_0": "The NodeEntry data."
        }
      },
      "registerNode((string,string,string[],string,uint8))": {
        "params": {
          "entry": "The NodeEntry data."
        },
        "returns": {
          "_0": "The UID of the registered node."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "NodeRegistry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Registered(bytes32,address,(bytes32,string,string,string[],string,address,uint8,uint8))": {
        "notice": "Emitted when a new node has been registered"
      }
    },
    "kind": "user",
    "methods": {
      "getNode(bytes32)": {
        "notice": "Retrieves a node entry by its UID"
      },
      "registerNode((string,string,string[],string,uint8))": {
        "notice": "Registers a new node entry"
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "The global node registry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1348,
        "contract": "contracts/NodeRegistry.sol:NodeRegistry",
        "label": "_registry",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(NodeEntry)1272_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(NodeStatus)1252": {
        "encoding": "inplace",
        "label": "enum NodeStatus",
        "numberOfBytes": "1"
      },
      "t_enum(NodeType)1248": {
        "encoding": "inplace",
        "label": "enum NodeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(NodeEntry)1272_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NodeEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(NodeEntry)1272_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NodeEntry)1272_storage": {
        "encoding": "inplace",
        "label": "struct NodeEntry",
        "members": [
          {
            "astId": 1254,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "uid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1256,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1258,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "callbackUrl",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1261,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 1263,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "industryCode",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1265,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1268,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "nodeType",
            "offset": 20,
            "slot": "5",
            "type": "t_enum(NodeType)1248"
          },
          {
            "astId": 1271,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "status",
            "offset": 21,
            "slot": "5",
            "type": "t_enum(NodeStatus)1252"
          }
        ],
        "numberOfBytes": "192"
      }
    }
  }
}