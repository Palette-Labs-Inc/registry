{
  "address": "0x90c35b5CC8785C8C963fEDF2Fd15A4286058021f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "registerer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callbackUrl",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "location",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "industryCode",
              "type": "string"
            },
            {
              "internalType": "enum NodeType",
              "name": "nodeType",
              "type": "uint8"
            },
            {
              "internalType": "enum NodeStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct NodeEntry",
          "name": "node",
          "type": "tuple"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "getNode",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callbackUrl",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "location",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "industryCode",
              "type": "string"
            },
            {
              "internalType": "enum NodeType",
              "name": "nodeType",
              "type": "uint8"
            },
            {
              "internalType": "enum NodeStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct NodeEntry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callbackUrl",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "location",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "industryCode",
              "type": "string"
            },
            {
              "internalType": "enum NodeType",
              "name": "nodeType",
              "type": "uint8"
            },
            {
              "internalType": "enum NodeStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct NodeEntry",
          "name": "entry",
          "type": "tuple"
        }
      ],
      "name": "registerNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x843876e098172ef143fcae1589578f135e92e131e6bc70a7e2d839545930cfb9",
  "receipt": {
    "to": null,
    "from": "0xd443dDeeC8cD386B6d592b82853738490798922a",
    "contractAddress": "0x90c35b5CC8785C8C963fEDF2Fd15A4286058021f",
    "transactionIndex": 2,
    "gasUsed": "1024607",
    "logsBloom": "0x
    "blockHash": "0x8568c1fce48461f14b667db586dd10de77e77d5dce381fca10c7e5ed4e11e06d",
    "transactionHash": "0x843876e098172ef143fcae1589578f135e92e131e6bc70a7e2d839545930cfb9",
    "logs": [],
    "blockNumber": 5657913,
    "cumulativeGasUsed": "1093032",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2608d27e0e744a8f14eb1db852d8a6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callbackUrl\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"location\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"industryCode\",\"type\":\"string\"},{\"internalType\":\"enum NodeType\",\"name\":\"nodeType\",\"type\":\"uint8\"},{\"internalType\":\"enum NodeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct NodeEntry\",\"name\":\"node\",\"type\":\"tuple\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callbackUrl\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"location\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"industryCode\",\"type\":\"string\"},{\"internalType\":\"enum NodeType\",\"name\":\"nodeType\",\"type\":\"uint8\"},{\"internalType\":\"enum NodeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct NodeEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callbackUrl\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"location\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"industryCode\",\"type\":\"string\"},{\"internalType\":\"enum NodeType\",\"name\":\"nodeType\",\"type\":\"uint8\"},{\"internalType\":\"enum NodeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct NodeEntry\",\"name\":\"entry\",\"type\":\"tuple\"}],\"name\":\"registerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,string,string,string[],string,uint8,uint8))\":{\"params\":{\"node\":\"The node entry data.\",\"registerer\":\"The address of the account used to register the schema.\",\"uid\":\"The schema UID.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Creates a new NodeRegistry instance.\"},\"getNode(bytes32)\":{\"params\":{\"uid\":\"The UID of the node to retrieve.\"},\"returns\":{\"_0\":\"The NodeEntry data.\"}},\"registerNode((bytes32,string,string,string[],string,uint8,uint8))\":{\"params\":{\"entry\":\"The NodeEntry data.\"},\"returns\":{\"_0\":\"The UID of the registered node.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"NodeRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,string,string,string[],string,uint8,uint8))\":{\"notice\":\"Emitted when a new node has been registered\"}},\"kind\":\"user\",\"methods\":{\"getNode(bytes32)\":{\"notice\":\"Retrieves a node entry by its UID\"},\"registerNode((bytes32,string,string,string[],string,uint8,uint8))\":{\"notice\":\"Registers a new node entry\"},\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"The global node registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NodeRegistry.sol\":\"NodeRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing an ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x31ea2560e28a597f515d73d35ab81148662ed1f9b797d64cfe66f736d8443e8d\",\"license\":\"MIT\"},\"contracts/INodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Define an enum for a Provider Supporting Node and Buyer Supporting Node\\nenum NodeType {\\n    PSN,\\n    BSN\\n}\\n\\n// Define an enum for the status\\nenum NodeStatus {\\n    VERIFIED,\\n    UNVERIFIED\\n}\\n\\n// Define a struct for the Node Entry outside the interface\\nstruct NodeEntry {\\n    bytes32 uid; // Unique identifier\\n    string name; // Name of the node\\n    string callbackUrl; // Callback URL of the server for the node\\n    string[] location; // Array of h3 strings for the supported location\\n    string industryCode; // Industry code\\n    NodeType nodeType; // Type of the node (PSN or BSN)\\n    NodeStatus status; // Status of the node (VERIFIED or UNVERIFIED)\\n}\\n\\n/// @title INodeEntry\\n/// @notice Interface for Node Entry management in a Solidity smart contract.\\ninterface INodeRegistry {\\n    /// @notice Emitted when a new node has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param node The node entry data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, NodeEntry node);\\n\\n    /// @notice Registers a new node entry\\n    /// @param entry The NodeEntry data.\\n    /// @return The UID of the registered node.\\n    function registerNode(NodeEntry calldata entry) external returns (bytes32);\\n\\n    /// @notice Retrieves a node entry by its UID\\n    /// @param uid The UID of the node to retrieve.\\n    /// @return The NodeEntry data.\\n    function getNode(bytes32 uid) external view returns (NodeEntry memory);\\n}\\n\",\"keccak256\":\"0x929bc388aa2d2b685a786abcdf2fd2eb22e8b6ff93561e52b156b51ca79ccc2f\",\"license\":\"MIT\"},\"contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"contracts/NodeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { INodeRegistry, NodeEntry } from \\\"./INodeRegistry.sol\\\";\\nimport { EMPTY_UID } from \\\"./Common.sol\\\";\\nimport { Semver } from \\\"./Semver.sol\\\";\\n\\n/// @title NodeRegistry\\n/// @notice The global node registry.\\ncontract NodeRegistry is INodeRegistry, Semver {\\n    error AlreadyExists();\\n\\n    // The global mapping between node records and their IDs.\\n    mapping(bytes32 uid => NodeEntry nodeEntry) private _registry;\\n\\n    /// @dev Creates a new NodeRegistry instance.\\n    constructor() Semver(0, 0, 1) {}\\n\\n    /// @inheritdoc INodeRegistry\\n    function registerNode(NodeEntry calldata entry) external returns (bytes32) {\\n        NodeEntry memory nodeEntry = NodeEntry({\\n            uid: EMPTY_UID,\\n            name: entry.name,\\n            callbackUrl: entry.callbackUrl,\\n            location: entry.location,\\n            industryCode: entry.industryCode,\\n            nodeType: entry.nodeType,\\n            status: entry.status\\n        });\\n\\n        bytes32 uid = _getUID(nodeEntry);\\n        if (_registry[uid].uid != EMPTY_UID) {\\n            revert AlreadyExists();\\n        }\\n\\n        nodeEntry.uid = uid;\\n        _registry[uid] = nodeEntry;\\n\\n        emit Registered(uid, msg.sender, nodeEntry);\\n\\n        return uid;\\n    }\\n\\n    /// @inheritdoc INodeRegistry\\n    function getNode(bytes32 uid) external view returns (NodeEntry memory) {\\n        return _registry[uid];\\n    }\\n\\n    /// @dev Calculates a UID for a given node entry.\\n    /// @param nodeEntry The input data.\\n    /// @return node UID.\\n    function _getUID(NodeEntry memory nodeEntry) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(nodeEntry.name, nodeEntry.callbackUrl, nodeEntry.industryCode));\\n    }\\n}\\n\",\"keccak256\":\"0x35450f8db0dce4097d9e6fb5c59eb47b86f264b1bf383f3b81705dc6b89f43cc\",\"license\":\"MIT\"},\"contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\ncontract Semver is ISemver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _patch;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _patch = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_patch))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x4f23442d048661b6aaa188ddc16b69cb310c2e44066b3852026afcb4201d61a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506000608081905260a052600160c05260805160a05160c05161119e61004f6000396000610724015260006106fb015260006106d2015261119e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634675c4391461004657806350c946fe1461006c57806354fd4d501461008c575b600080fd5b610059610054366004610a65565b6100a1565b6040519081526020015b60405180910390f35b61007f61007a366004610aa7565b6103a2565b6040516100639190610b98565b6100946106cb565b6040516100639190610c9a565b6000806040518060e001604052806000801b81526020018480602001906100c89190610cad565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161010f6040860186610cad565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016101566060860186610d19565b61015f91610dff565b81526020016101716080860186610cad565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016101bb60c0860160a08701610eff565b60018111156101cc576101cc610b2e565b81526020016101e160e0860160c08701610eff565b60018111156101f2576101f2610b2e565b9052905060006102018261076e565b6000818152602081905260409020549091501561024a576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808252600081815260208181526040909120835181559083015183919060018201906102769082610fbe565b506040820151600282019061028b9082610fbe565b50606082015180516102a7916003840191602090910190610950565b50608082015160048201906102bc9082610fbe565b5060a08201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183818111156102fd576102fd610b2e565b021790555060c08201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010083600181111561034457610344610b2e565b02179055509050503373ffffffffffffffffffffffffffffffffffffffff16817f03a33a72ef165f76b1458e73cff0dfff89fc44d28bc8334c489b77e4468c459b846040516103939190610b98565b60405180910390a39392505050565b6103aa6109a6565b60008281526020818152604091829020825160e081019093528054835260018101805491928401916103db90610f1c565b80601f016020809104026020016040519081016040528092919081815260200182805461040790610f1c565b80156104545780601f1061042957610100808354040283529160200191610454565b820191906000526020600020905b81548152906001019060200180831161043757829003601f168201915b5050505050815260200160028201805461046d90610f1c565b80601f016020809104026020016040519081016040528092919081815260200182805461049990610f1c565b80156104e65780601f106104bb576101008083540402835291602001916104e6565b820191906000526020600020905b8154815290600101906020018083116104c957829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156105c057838290600052602060002001805461053390610f1c565b80601f016020809104026020016040519081016040528092919081815260200182805461055f90610f1c565b80156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b505050505081526020019060010190610514565b5050505081526020016004820180546105d890610f1c565b80601f016020809104026020016040519081016040528092919081815260200182805461060490610f1c565b80156106515780601f1061062657610100808354040283529160200191610651565b820191906000526020600020905b81548152906001019060200180831161063457829003601f168201915b5050509183525050600582015460209091019060ff16600181111561067857610678610b2e565b600181111561068957610689610b2e565b81526020016005820160019054906101000a900460ff1660018111156106b1576106b1610b2e565b60018111156106c2576106c2610b2e565b90525092915050565b60606106f67f00000000000000000000000000000000000000000000000000000000000000006107ae565b61071f7f00000000000000000000000000000000000000000000000000000000000000006107ae565b6107487f00000000000000000000000000000000000000000000000000000000000000006107ae565b60405160200161075a939291906110d8565b604051602081830303815290604052905090565b60008160200151826040015183608001516040516020016107919392919061114e565b604051602081830303815290604052805190602001209050919050565b606060006107bb8361086d565b600101905060008167ffffffffffffffff8111156107db576107db610d81565b6040519080825280601f01601f191660200182016040528015610805576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461080f575b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106108b6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106108e2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061090057662386f26fc10000830492506010015b6305f5e1008310610918576305f5e100830492506008015b612710831061092c57612710830492506004015b6064831061093e576064830492506002015b600a831061094a576001015b92915050565b828054828255906000526020600020908101928215610996579160200282015b8281111561099657825182906109869082610fbe565b5091602001919060010190610970565b506109a29291506109f6565b5090565b6040518060e001604052806000801916815260200160608152602001606081526020016060815260200160608152602001600060018111156109ea576109ea610b2e565b81526020016000905290565b808211156109a2576000610a0a8282610a13565b506001016109f6565b508054610a1f90610f1c565b6000825580601f10610a2f575050565b601f016020900490600052602060002090810190610a4d9190610a50565b50565b5b808211156109a25760008155600101610a51565b600060208284031215610a7757600080fd5b813567ffffffffffffffff811115610a8e57600080fd5b820160e08185031215610aa057600080fd5b9392505050565b600060208284031215610ab957600080fd5b5035919050565b60005b83811015610adb578181015183820152602001610ac3565b50506000910152565b60008151808452610afc816020860160208601610ac0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b94577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600060208083528351818401528084015160e06040850152610bbe610100850182610ae4565b905060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080868403016060870152610bfa8383610ae4565b60608801518782038301608089015280518083529194508501925084840190600581901b8501860160005b82811015610c515784878303018452610c3f828751610ae4565b95880195938801939150600101610c25565b5060808a01519650838982030160a08a0152610c6d8188610ae4565b965050505050505060a0840151610c8760c0850182610b5d565b5060c084015161086560e0850182610b5d565b602081526000610aa06020830184610ae4565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610ce257600080fd5b83018035915067ffffffffffffffff821115610cfd57600080fd5b602001915036819003821315610d1257600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d4e57600080fd5b83018035915067ffffffffffffffff821115610d6957600080fd5b6020019150600581901b3603821315610d1257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610df757610df7610d81565b604052919050565b600067ffffffffffffffff80841115610e1a57610e1a610d81565b8360051b6020610e2b818301610db0565b868152918501918181019036841115610e4357600080fd5b865b84811015610ee657803586811115610e5d5760008081fd5b8801601f3681830112610e705760008081fd5b813588811115610e8257610e82610d81565b610eb1877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08484011601610db0565b91508082523687828501011115610ec85760008081fd5b80878401888401376000908201870152845250918301918301610e45565b50979650505050505050565b60028110610a4d57600080fd5b600060208284031215610f1157600080fd5b8135610aa081610ef2565b600181811c90821680610f3057607f821691505b602082108103610f69577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610fb957600081815260208120601f850160051c81016020861015610f965750805b601f850160051c820191505b81811015610fb557828155600101610fa2565b5050505b505050565b815167ffffffffffffffff811115610fd857610fd8610d81565b610fec81610fe68454610f1c565b84610f6f565b602080601f83116001811461103f57600084156110095750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610fb5565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561108c5788860151825594840194600190910190840161106d565b50858210156110c857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600084516110ea818460208901610ac0565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551611126816001850160208a01610ac0565b60019201918201528351611141816002840160208801610ac0565b0160020195945050505050565b60008451611160818460208901610ac0565b845190830190611174818360208901610ac0565b8451910190611187818360208801610ac0565b019594505050505056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634675c4391461004657806350c946fe1461006c57806354fd4d501461008c575b600080fd5b610059610054366004610a65565b6100a1565b6040519081526020015b60405180910390f35b61007f61007a366004610aa7565b6103a2565b6040516100639190610b98565b6100946106cb565b6040516100639190610c9a565b6000806040518060e001604052806000801b81526020018480602001906100c89190610cad565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161010f6040860186610cad565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016101566060860186610d19565b61015f91610dff565b81526020016101716080860186610cad565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016101bb60c0860160a08701610eff565b60018111156101cc576101cc610b2e565b81526020016101e160e0860160c08701610eff565b60018111156101f2576101f2610b2e565b9052905060006102018261076e565b6000818152602081905260409020549091501561024a576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808252600081815260208181526040909120835181559083015183919060018201906102769082610fbe565b506040820151600282019061028b9082610fbe565b50606082015180516102a7916003840191602090910190610950565b50608082015160048201906102bc9082610fbe565b5060a08201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183818111156102fd576102fd610b2e565b021790555060c08201516005820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010083600181111561034457610344610b2e565b02179055509050503373ffffffffffffffffffffffffffffffffffffffff16817f03a33a72ef165f76b1458e73cff0dfff89fc44d28bc8334c489b77e4468c459b846040516103939190610b98565b60405180910390a39392505050565b6103aa6109a6565b60008281526020818152604091829020825160e081019093528054835260018101805491928401916103db90610f1c565b80601f016020809104026020016040519081016040528092919081815260200182805461040790610f1c565b80156104545780601f1061042957610100808354040283529160200191610454565b820191906000526020600020905b81548152906001019060200180831161043757829003601f168201915b5050505050815260200160028201805461046d90610f1c565b80601f016020809104026020016040519081016040528092919081815260200182805461049990610f1c565b80156104e65780601f106104bb576101008083540402835291602001916104e6565b820191906000526020600020905b8154815290600101906020018083116104c957829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156105c057838290600052602060002001805461053390610f1c565b80601f016020809104026020016040519081016040528092919081815260200182805461055f90610f1c565b80156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b505050505081526020019060010190610514565b5050505081526020016004820180546105d890610f1c565b80601f016020809104026020016040519081016040528092919081815260200182805461060490610f1c565b80156106515780601f1061062657610100808354040283529160200191610651565b820191906000526020600020905b81548152906001019060200180831161063457829003601f168201915b5050509183525050600582015460209091019060ff16600181111561067857610678610b2e565b600181111561068957610689610b2e565b81526020016005820160019054906101000a900460ff1660018111156106b1576106b1610b2e565b60018111156106c2576106c2610b2e565b90525092915050565b60606106f67f00000000000000000000000000000000000000000000000000000000000000006107ae565b61071f7f00000000000000000000000000000000000000000000000000000000000000006107ae565b6107487f00000000000000000000000000000000000000000000000000000000000000006107ae565b60405160200161075a939291906110d8565b604051602081830303815290604052905090565b60008160200151826040015183608001516040516020016107919392919061114e565b604051602081830303815290604052805190602001209050919050565b606060006107bb8361086d565b600101905060008167ffffffffffffffff8111156107db576107db610d81565b6040519080825280601f01601f191660200182016040528015610805576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461080f575b509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106108b6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106108e2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061090057662386f26fc10000830492506010015b6305f5e1008310610918576305f5e100830492506008015b612710831061092c57612710830492506004015b6064831061093e576064830492506002015b600a831061094a576001015b92915050565b828054828255906000526020600020908101928215610996579160200282015b8281111561099657825182906109869082610fbe565b5091602001919060010190610970565b506109a29291506109f6565b5090565b6040518060e001604052806000801916815260200160608152602001606081526020016060815260200160608152602001600060018111156109ea576109ea610b2e565b81526020016000905290565b808211156109a2576000610a0a8282610a13565b506001016109f6565b508054610a1f90610f1c565b6000825580601f10610a2f575050565b601f016020900490600052602060002090810190610a4d9190610a50565b50565b5b808211156109a25760008155600101610a51565b600060208284031215610a7757600080fd5b813567ffffffffffffffff811115610a8e57600080fd5b820160e08185031215610aa057600080fd5b9392505050565b600060208284031215610ab957600080fd5b5035919050565b60005b83811015610adb578181015183820152602001610ac3565b50506000910152565b60008151808452610afc816020860160208601610ac0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b94577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600060208083528351818401528084015160e06040850152610bbe610100850182610ae4565b905060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080868403016060870152610bfa8383610ae4565b60608801518782038301608089015280518083529194508501925084840190600581901b8501860160005b82811015610c515784878303018452610c3f828751610ae4565b95880195938801939150600101610c25565b5060808a01519650838982030160a08a0152610c6d8188610ae4565b965050505050505060a0840151610c8760c0850182610b5d565b5060c084015161086560e0850182610b5d565b602081526000610aa06020830184610ae4565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610ce257600080fd5b83018035915067ffffffffffffffff821115610cfd57600080fd5b602001915036819003821315610d1257600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d4e57600080fd5b83018035915067ffffffffffffffff821115610d6957600080fd5b6020019150600581901b3603821315610d1257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610df757610df7610d81565b604052919050565b600067ffffffffffffffff80841115610e1a57610e1a610d81565b8360051b6020610e2b818301610db0565b868152918501918181019036841115610e4357600080fd5b865b84811015610ee657803586811115610e5d5760008081fd5b8801601f3681830112610e705760008081fd5b813588811115610e8257610e82610d81565b610eb1877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08484011601610db0565b91508082523687828501011115610ec85760008081fd5b80878401888401376000908201870152845250918301918301610e45565b50979650505050505050565b60028110610a4d57600080fd5b600060208284031215610f1157600080fd5b8135610aa081610ef2565b600181811c90821680610f3057607f821691505b602082108103610f69577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610fb957600081815260208120601f850160051c81016020861015610f965750805b601f850160051c820191505b81811015610fb557828155600101610fa2565b5050505b505050565b815167ffffffffffffffff811115610fd857610fd8610d81565b610fec81610fe68454610f1c565b84610f6f565b602080601f83116001811461103f57600084156110095750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610fb5565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561108c5788860151825594840194600190910190840161106d565b50858210156110c857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600084516110ea818460208901610ac0565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551611126816001850160208a01610ac0565b60019201918201528351611141816002840160208801610ac0565b0160020195945050505050565b60008451611160818460208901610ac0565b845190830190611174818360208901610ac0565b8451910190611187818360208801610ac0565b019594505050505056fea164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "Registered(bytes32,address,(bytes32,string,string,string[],string,uint8,uint8))": {
        "params": {
          "node": "The node entry data.",
          "registerer": "The address of the account used to register the schema.",
          "uid": "The schema UID."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Creates a new NodeRegistry instance."
      },
      "getNode(bytes32)": {
        "params": {
          "uid": "The UID of the node to retrieve."
        },
        "returns": {
          "_0": "The NodeEntry data."
        }
      },
      "registerNode((bytes32,string,string,string[],string,uint8,uint8))": {
        "params": {
          "entry": "The NodeEntry data."
        },
        "returns": {
          "_0": "The UID of the registered node."
        }
      },
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "title": "NodeRegistry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Registered(bytes32,address,(bytes32,string,string,string[],string,uint8,uint8))": {
        "notice": "Emitted when a new node has been registered"
      }
    },
    "kind": "user",
    "methods": {
      "getNode(bytes32)": {
        "notice": "Retrieves a node entry by its UID"
      },
      "registerNode((bytes32,string,string,string[],string,uint8,uint8))": {
        "notice": "Registers a new node entry"
      },
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "notice": "The global node registry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1329,
        "contract": "contracts/NodeRegistry.sol:NodeRegistry",
        "label": "_registry",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(NodeEntry)1268_storage)"
      }
    ],
    "types": {
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(NodeStatus)1250": {
        "encoding": "inplace",
        "label": "enum NodeStatus",
        "numberOfBytes": "1"
      },
      "t_enum(NodeType)1247": {
        "encoding": "inplace",
        "label": "enum NodeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(NodeEntry)1268_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NodeEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(NodeEntry)1268_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NodeEntry)1268_storage": {
        "encoding": "inplace",
        "label": "struct NodeEntry",
        "members": [
          {
            "astId": 1252,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "uid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1254,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1256,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "callbackUrl",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1259,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 1261,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "industryCode",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1264,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "nodeType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(NodeType)1247"
          },
          {
            "astId": 1267,
            "contract": "contracts/NodeRegistry.sol:NodeRegistry",
            "label": "status",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(NodeStatus)1250"
          }
        ],
        "numberOfBytes": "192"
      }
    }
  }
}