"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeRegistry__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "AlreadyExists",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "registerer",
                type: "address",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32",
                    },
                    {
                        internalType: "string",
                        name: "name",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "callbackUrl",
                        type: "string",
                    },
                    {
                        internalType: "string[]",
                        name: "location",
                        type: "string[]",
                    },
                    {
                        internalType: "string",
                        name: "industryCode",
                        type: "string",
                    },
                    {
                        internalType: "address",
                        name: "owner",
                        type: "address",
                    },
                    {
                        internalType: "enum NodeType",
                        name: "nodeType",
                        type: "uint8",
                    },
                    {
                        internalType: "enum NodeStatus",
                        name: "status",
                        type: "uint8",
                    },
                ],
                indexed: false,
                internalType: "struct NodeEntry",
                name: "node",
                type: "tuple",
            },
        ],
        name: "Registered",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32",
            },
        ],
        name: "getNode",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32",
                    },
                    {
                        internalType: "string",
                        name: "name",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "callbackUrl",
                        type: "string",
                    },
                    {
                        internalType: "string[]",
                        name: "location",
                        type: "string[]",
                    },
                    {
                        internalType: "string",
                        name: "industryCode",
                        type: "string",
                    },
                    {
                        internalType: "address",
                        name: "owner",
                        type: "address",
                    },
                    {
                        internalType: "enum NodeType",
                        name: "nodeType",
                        type: "uint8",
                    },
                    {
                        internalType: "enum NodeStatus",
                        name: "status",
                        type: "uint8",
                    },
                ],
                internalType: "struct NodeEntry",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "string",
                        name: "name",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "callbackUrl",
                        type: "string",
                    },
                    {
                        internalType: "string[]",
                        name: "location",
                        type: "string[]",
                    },
                    {
                        internalType: "string",
                        name: "industryCode",
                        type: "string",
                    },
                    {
                        internalType: "enum NodeType",
                        name: "nodeType",
                        type: "uint8",
                    },
                ],
                internalType: "struct RegisterNodeEntryParams",
                name: "entry",
                type: "tuple",
            },
        ],
        name: "registerNode",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x60e060405234801561001057600080fd5b506000608081905260a052600160c05260805160a05160c0516112ab61004f600039600061045c015260006104330152600061040a01526112ab6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806350c946fe1461004657806354fd4d501461006f5780635888053014610084575b600080fd5b610059610054366004610b0e565b6100a5565b6040516100669190610c75565b60405180910390f35b610077610403565b6040516100669190610d6e565b610097610092366004610d88565b6104a6565b604051908152602001610066565b6100ad6109db565b60008281526020818152604091829020825161010081019093528054835260018101805491928401916100df90610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461010b90610dc3565b80156101585780601f1061012d57610100808354040283529160200191610158565b820191906000526020600020905b81548152906001019060200180831161013b57829003601f168201915b5050505050815260200160028201805461017190610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610dc3565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156102c457838290600052602060002001805461023790610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461026390610dc3565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b505050505081526020019060010190610218565b5050505081526020016004820180546102dc90610dc3565b80601f016020809104026020016040519081016040528092919081815260200182805461030890610dc3565b80156103555780601f1061032a57610100808354040283529160200191610355565b820191906000526020600020905b81548152906001019060200180831161033857829003601f168201915b5050509183525050600582015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff1660028111156103b0576103b0610c0b565b60028111156103c1576103c1610c0b565b81526020016005820160159054906101000a900460ff1660028111156103e9576103e9610c0b565b60028111156103fa576103fa610c0b565b90525092915050565b606061042e7f00000000000000000000000000000000000000000000000000000000000000006107fa565b6104577f00000000000000000000000000000000000000000000000000000000000000006107fa565b6104807f00000000000000000000000000000000000000000000000000000000000000006107fa565b60405160200161049293929190610e16565b604051602081830303815290604052905090565b6040805161010081019091526000808252908190602081016104c88580610e8c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060209081019061051190860186610e8c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016105586040860186610ef8565b61056191610fde565b81526020016105736060860186610e8c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252503360208201526040016105c360a08601608087016110d1565b60028111156105d4576105d4610c0b565b815260200160009052905060006105ea826108b8565b60008181526020819052604090205490915015610633576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082526000818152602081815260409091208351815590830151839190600182019061065f9082611141565b50604082015160028201906106749082611141565b5060608201518051610690916003840191602090910190610a49565b50608082015160048201906106a59082611141565b5060a082015160058201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff00000000000000000000000000000000000000000016177401000000000000000000000000000000000000000083600281111561074157610741610c0b565b021790555060e08201516005820180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000083600281111561079c5761079c610c0b565b02179055509050503373ffffffffffffffffffffffffffffffffffffffff16817fd4aca4239945b9a5e80d97ac0f8dc1a5e4c8b1b6c0e0b7ae60bf27cb349ee819846040516107eb9190610c75565b60405180910390a39392505050565b60606000610807836108f8565b600101905060008167ffffffffffffffff81111561082757610827610f60565b6040519080825280601f01601f191660200182016040528015610851576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461085b57509392505050565b60008160200151826040015183608001516040516020016108db9392919061125b565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610941577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061096d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061098b57662386f26fc10000830492506010015b6305f5e10083106109a3576305f5e100830492506008015b61271083106109b757612710830492506004015b606483106109c9576064830492506002015b600a83106109d5576001015b92915050565b6040518061010001604052806000801916815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115610a3d57610a3d610c0b565b81526020016000905290565b828054828255906000526020600020908101928215610a8f579160200282015b82811115610a8f5782518290610a7f9082611141565b5091602001919060010190610a69565b50610a9b929150610a9f565b5090565b80821115610a9b576000610ab38282610abc565b50600101610a9f565b508054610ac890610dc3565b6000825580601f10610ad8575050565b601f016020900490600052602060002090810190610af69190610af9565b50565b5b80821115610a9b5760008155600101610afa565b600060208284031215610b2057600080fd5b5035919050565b60005b83811015610b42578181015183820152602001610b2a565b50506000910152565b60008151808452610b63816020860160208601610b27565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610bfe577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018952610bec838351610b4b565b98840198925090830190600101610bb2565b5090979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610c71577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081528151602082015260006020830151610100806040850152610c9e610120850183610b4b565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080868503016060870152610cda8483610b4b565b93506060870151915080868503016080870152610cf78483610b95565b935060808701519150808685030160a087015250610d158382610b4b565b92505060a0850151610d3f60c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c0850151610d5260e0860182610c3a565b5060e0850151610d6482860182610c3a565b5090949350505050565b602081526000610d816020830184610b4b565b9392505050565b600060208284031215610d9a57600080fd5b813567ffffffffffffffff811115610db157600080fd5b820160a08185031215610d8157600080fd5b600181811c90821680610dd757607f821691505b602082108103610e10577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008451610e28818460208901610b27565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610e64816001850160208a01610b27565b60019201918201528351610e7f816002840160208801610b27565b0160020195945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610ec157600080fd5b83018035915067ffffffffffffffff821115610edc57600080fd5b602001915036819003821315610ef157600080fd5b9250929050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610f2d57600080fd5b83018035915067ffffffffffffffff821115610f4857600080fd5b6020019150600581901b3603821315610ef157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610fd657610fd6610f60565b604052919050565b600067ffffffffffffffff80841115610ff957610ff9610f60565b8360051b602061100a818301610f8f565b86815291850191818101903684111561102257600080fd5b865b848110156110c55780358681111561103c5760008081fd5b8801601f368183011261104f5760008081fd5b81358881111561106157611061610f60565b611090877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08484011601610f8f565b915080825236878285010111156110a75760008081fd5b80878401888401376000908201870152845250918301918301611024565b50979650505050505050565b6000602082840312156110e357600080fd5b813560038110610d8157600080fd5b601f82111561113c57600081815260208120601f850160051c810160208610156111195750805b601f850160051c820191505b8181101561113857828155600101611125565b5050505b505050565b815167ffffffffffffffff81111561115b5761115b610f60565b61116f816111698454610dc3565b846110f2565b602080601f8311600181146111c2576000841561118c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611138565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561120f578886015182559484019460019091019084016111f0565b508582101561124b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000845161126d818460208901610b27565b845190830190611281818360208901610b27565b8451910190611294818360208801610b27565b019594505050505056fea164736f6c6343000813000a";
const isSuperArgs = (xs) => xs.length > 1;
class NodeRegistry__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.NodeRegistry__factory = NodeRegistry__factory;
//# sourceMappingURL=NodeRegistry__factory.js.map